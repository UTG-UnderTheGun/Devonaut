version: "3.8"
services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: devonaut-server
    env_file:
      - ./server/.env
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./server:/app  # Bind mount local server directory to container
      - /app/__pycache__/  # Prevent caching issues
    depends_on:
      - mongo
      - redis
    environment:
      - MONGO_URI=mongodb://root:example@mongo:27017/users?authSource=admin
      - SECRET_KEY=SDflkjsdS:DLKFJ
      - DOCKER_HOST=unix:///var/run/docker.sock
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - app-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload  # Enable auto-reload

  redis:
    image: redis:alpine
    container_name: devonaut-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
    command: redis-server --appendonly yes

  mongo:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: devonaut-client
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app  
      - /app/node_modules  
    depends_on:
      - server
    environment:
      - NODE_ENV=development
      - SERVER_API=http://server:8000
    networks:
      - app-network
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.3'
    #       memory: 512M
    command: npm run dev

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  mongo-data:
